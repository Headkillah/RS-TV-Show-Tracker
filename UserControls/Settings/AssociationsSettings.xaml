<UserControl x:Class="RoliSoft.TVShowTracker.UserControls.AssociationsSettings"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:GreyableImage="clr-namespace:RoliSoft.TVShowTracker.Dependencies.GreyableImage" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" TextOptions.TextFormattingMode="Display" TextOptions.TextRenderingMode="ClearType" RenderOptions.BitmapScalingMode="HighQuality" SnapsToDevicePixels="True" UseLayoutRounding="True"
        Loaded="UserControlLoaded">
    <Grid>
        <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel Orientation="Vertical">
            <StackPanel Margin="10,7,10,7" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/RSTVShowTracker;component/Images/eye.png" Height="16" Width="16" Margin="0,1,5,0" />
                    <CheckBox Content=" Monitor processes" Name="monitorProcesses" Checked="MonitorProcessesChecked"  Unchecked="MonitorProcessesUnchecked" FontSize="16" Foreground="DarkBlue" Padding="0" />
                </StackPanel>
                <TextBlock TextWrapping="Wrap" Margin="3,5" Padding="20,0,0,0">
                    <Image Source="/RSTVShowTracker;component/Images/processor.png" Height="12" Width="12" Margin="-20,0,0,4" /><StackPanel Name="processesStackPanel" Orientation="Horizontal" Margin="0,0,0,2" /><LineBreak />
                    <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />The applications listed above are associated to video extensions and are monitored by default. You can add additional processes to monitor by entering the executable names separated by a comma:
                </TextBlock>
                <xctk:WatermarkTextBox Name="processTextBox" TextChanged="ProcessTextBoxTextChanged" Watermark="For example: vlc.exe,mpc-hc.exe,mpc-hc64.exe" Margin="0,0,5,0" />
                </StackPanel>

                <StackPanel Margin="10,0,10,7" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/RSTVShowTracker;component/Images/code.png" Height="16" Width="16" Margin="0,1,5,0" />
                        <Label Content="Monitoring method" FontSize="16" Foreground="DarkBlue" Padding="0" />
                    </StackPanel>
                    <ComboBox Margin="0,5,5,0" Name="methodComboBox" SelectionChanged="MethodComboBoxOnSelectionChanged">
                        <ComboBoxItem>Internal file handle monitoring (recommended)</ComboBoxItem>
                        <ComboBoxItem>Window title monitoring (recommended if not elevated)</ComboBoxItem>
                        <ComboBoxItem>Sysinternals Handle (external)</ComboBoxItem>
                        <ComboBoxItem>NirSoft OpenedFilesView (external)</ComboBoxItem>
                    </ComboBox>
                    <TextBlock Name="internalInfo" TextWrapping="Wrap" Margin="3,5,3,0" Padding="20,0,0,0" Visibility="Collapsed">
                        <Image Source="/RSTVShowTracker;component/Images/exclamation.png" Height="12" Width="12" Margin="-20,0,0,-1" />This method requires administrator rights.<LineBreak />
                        <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />The internal implementation uses an undocumented call to <Bold>NtQuerySystemInformation()</Bold> to get an open file handle list. Administrator rights are required when the handles are resolved to file names through <Bold>NtQueryObject()</Bold>. Some memory leaks are bound to occur because some handles make the aforementioned function to hang, <Bold>CancelIo()</Bold> is called on them, but most of the time the thread will have to be killed forcefully which leaves some unmanaged allocations in the memory. These battles are logged with trace level from <Bold>UnsafeGetFilesLockedBy()</Bold>.
                    </TextBlock>
                    <TextBlock Name="titleInfo" TextWrapping="Wrap" Margin="3,5,3,0" Padding="20,0,0,0" Visibility="Collapsed">
                        <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />This method does not require administrator rights.<LineBreak />It will enumerate the title of the windows' belonging to the processes you've listed above. Make sure when your player is playing a show, the file name is visible fully in the window's title. (Most players, such as VLC and MPC-HC already do this by default.)<LineBreak />This method is doesn't work anytime, since your player may modify the name, or just display part of it. Sometimes the parent folder names are also used in the recognition, but your player won't display the full path in its title. If you can run the software with admin rights, you should use the file handle-based implementations instead.
                    </TextBlock>
                    <TextBlock Name="sysinternalsInfo" TextWrapping="Wrap" Margin="3,5,3,0" Padding="20,0,0,0" Visibility="Collapsed">
                        <Image Source="/RSTVShowTracker;component/Images/exclamation.png" Height="12" Width="12" Margin="-20,0,0,-1" />This method requires administrator rights.<LineBreak />
                        <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />Handle is a small console application developed by Sysinternals, which was acquired by Microsoft in 2006. This application loads a signed kernel-mode driver upon launch and does not have the issues my internal implementation has.<LineBreak />
                        <Image Source="/RSTVShowTracker;component/Images/exclamation.png" Height="12" Width="12" Margin="-20,0,0,-1" />To use this method, download <Hyperlink NavigateUri="http://technet.microsoft.com/en-us/sysinternals/bb896655.aspx" Click="HyperlinkClick">Handle.zip</Hyperlink><Image Source="/RSTVShowTracker;component/Images/external-small.png" Height="16" Width="16" Margin="0,-5,0,-3" /> and extract handle.exe near RSTVShowTracker.exe, or into C:\Windows\System32, or anywhere in your %PATH%.
                    </TextBlock>
                    <TextBlock Name="nirsoftInfo" TextWrapping="Wrap" Margin="3,5,3,0" Padding="20,0,0,0" Visibility="Collapsed">
                        <Image Source="/RSTVShowTracker;component/Images/exclamation.png" Height="12" Width="12" Margin="-20,0,0,-1" />This method requires administrator rights.<LineBreak />
                        <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />OpenedFilesView is a small GUI-based application developed by NirSoft. This application loads an unsigned kernel-mode driver upon launch and does not have the issues my internal implementation has, however it requires test driver signing mode to be enabled on 64-bit operating systems in order to load the unsigned driver. It is provided as an alternative to Sysinternals Handle, if that is working correctly, you shouldn't use this.<LineBreak />
                        <Image Source="/RSTVShowTracker;component/Images/exclamation.png" Height="12" Width="12" Margin="-20,0,0,-1" />To use this method, download <Hyperlink NavigateUri="http://www.nirsoft.net/utils/opened_files_view.html" Click="HyperlinkClick">ofview.zip</Hyperlink><Image Source="/RSTVShowTracker;component/Images/external-small.png" Height="16" Width="16" Margin="0,-5,0,-3" /> (or ofview-x64.zip) and extract OpenedFilesView.exe near RSTVShowTracker.exe, or into C:\Windows\System32, or anywhere in your %PATH%.
                    </TextBlock>
                </StackPanel>

                <StackPanel Margin="10,0,10,7" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/RSTVShowTracker;component/Images/drive-share.png" Height="16" Width="16" Margin="0,1,5,0" />
                        <CheckBox Content=" Monitor network shares" Name="monitorNetworkShare" Checked="MonitorNetworkShareChecked"  Unchecked="MonitorNetworkShareUnchecked"  FontSize="16" Foreground="DarkBlue" Padding="0" />
                    </StackPanel>
                    <TextBlock TextWrapping="Wrap" Margin="3,5,0,0" Padding="20,0,0,0">
                        <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />Monitors the usage of files shared on this computer. It will automatically mark them as watched, if it's being accessed for more than 10 minutes by another computer or device. This option does not affect UPnP/DLNA shares, only Windows shares.
                    </TextBlock>
                </StackPanel>

            <StackPanel Margin="10,0,10,7" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/RSTVShowTracker;component/Images/upnp.png" Height="16" Width="16" Margin="0,1,5,0" />
                    <CheckBox Content=" Share library through UPnP/DLNA" Name="upnpShare" Checked="UpnpShareChecked"  Unchecked="UpnpShareUnchecked"  FontSize="16" Foreground="DarkBlue" Padding="0" />
                </StackPanel>
                <TextBlock TextWrapping="Wrap" Margin="3,5,0,0" Padding="20,0,0,0">
                    <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />Shares the monitored download locations to your local network through UPnP/DLNA. Episodes will be marked as watched as if you were watching them on your local computer. The files will not be transcoded, they will be streamed in their original format.
                </TextBlock>
            </StackPanel>
            
            <StackPanel Margin="10,0,10,7" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/RSTVShowTracker;component/Images/refresh.png" Height="16" Width="16" Margin="0,1,5,0" />
                    <TextBlock FontSize="16" Foreground="DarkBlue" Padding="0">Restart if memory usage is over <xctk:IntegerUpDown Name="memLimit" Value="0" Increment="1" Minimum="0" Maximum="4096" Margin="0,0,0,-7" LostFocus="MemLimitOnLostFocus" /> MB</TextBlock>
                </StackPanel>
                <TextBlock TextWrapping="Wrap" Margin="3,5,0,0" Padding="20,0,0,0">
                    <Image Source="/RSTVShowTracker;component/Images/information.png" Height="12" Width="12" Margin="-20,0,0,-1" />Silently restarts the application if the memory usage goes over the specified limit. Set it to a value lower than 256 MB to disable it. Recommended value is 512 MB.<LineBreak />
                    <Image Source="/RSTVShowTracker;component/Images/exclamation.png" Height="12" Width="12" Margin="-20,0,0,-1" />This is a temporary measure until a successful attempt will be made to lower memory leaks resulting mostly from GDI handles originating from WPF or file handles that get stuck during the undocumented use of <Bold>NtQuerySystemInformation()</Bold>.
                </TextBlock>
            </StackPanel>
        </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
