<#@ template language="C#" hostspecific="true" debug="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Reflection;

[assembly: AssemblyVersion("<#= GenerateVersion() #>")]

namespace RoliSoft.TVShowTracker
{
    /// <summary>
    /// Contains informations about the assembly.
    /// </summary>
    public static partial class Signature
    {
        /// <summary>
        /// Gets the date and time when the executing assembly was compiled.
        /// </summary>
        /// <value>The compile time.</value>
        public static DateTime CompileTime
        {
            get { return DateTime.FromBinary(<#= DateTime.Now.ToBinary() #>); }
        }

        /// <summary>
        /// Gets the git commit hash.
        /// </summary>
        /// <value>The git commit hash.</value>
        public static string GitRevision
        {
            get { return "<#= GetRevision() #>"; }
        }

        /// <summary>
        /// Gets the directory in which the project was built.
        /// </summary>
        /// <value>The directory in which the project was built.</value>
        public static string BuildDirectory
        {
            get { return @"<#= Path.GetDirectoryName(Host.TemplateFile) #>"; }
        }
    }
}
<#+
    public string Run(string process, string arguments = null)
    {
        var sb = new StringBuilder();
        var p  = new Process
            {
                EnableRaisingEvents = true,
                StartInfo           =
                    {
                        FileName               = process,
                        Arguments              = arguments ?? string.Empty,
                        WorkingDirectory       = Path.GetDirectoryName(Host.TemplateFile),
                        UseShellExecute        = false,
                        RedirectStandardOutput = true,
                        RedirectStandardError  = true,
                        CreateNoWindow         = true
                    }
            };

        p.OutputDataReceived += (s, e) =>
            {
                if (!string.IsNullOrEmpty(e.Data))
                {
                    sb.AppendLine(e.Data);
                }
            };
        p.ErrorDataReceived += (s, e) =>
            {
                if (!string.IsNullOrEmpty(e.Data))
                {
                    sb.AppendLine(e.Data);
                }
            };

        try
        {
            p.Start();
            p.BeginOutputReadLine();
            p.BeginErrorReadLine();
            p.WaitForExit();
        }
        catch (Win32Exception) { }

        return sb.ToString();
    }

    public string GetRevision()
    {
        return Run("git", "rev-parse HEAD").Trim();
    }

    public string GenerateVersion()
    {
        var prefix = "2.2.0.";
        var count = Regex.Matches(Run("git", "shortlog -s"), @"(\d+)").Cast<Match>().Select(c => c.Groups[1].Value).Select(int.Parse).Sum();
        
        File.WriteAllText(Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "version.txt"), prefix + count.ToString());
        File.WriteAllText(Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "version.nsh"), "!define VERSION \"" + prefix + count.ToString() + "\"");

        return prefix + count;
    }
#>